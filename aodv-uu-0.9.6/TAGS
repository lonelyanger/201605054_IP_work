!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVE_ROUTE_TIMEOUT	lnx/kaodv-mod.c	63;"	d	file:
ACTIVE_ROUTE_TIMEOUT	params.h	31;"	d
ACTIVE_ROUTE_TIMEOUT_HELLO	params.h	41;"	d
ACTIVE_ROUTE_TIMEOUT_LLF	params.h	36;"	d
ADDR_BROADCAST	lnx/kaodv-mod.c	81;"	d	file:
ADDR_HOST	lnx/kaodv-mod.c	80;"	d	file:
ALLOWED_HELLO_LOSS	params.h	46;"	d
AODVDIR	Makefile	/^AODVDIR=$(shell pwd)$/;"	m
AODVGRP_MAX	lnx/kaodv-netlink.h	41;"	d
AODVGRP_NOTIFY	lnx/kaodv-netlink.h	/^  AODVGRP_NOTIFY = 1,$/;"	e	enum:__anon8
AODVGRP_NOTIFY	lnx/kaodv-netlink.h	37;"	d
AODV_BROADCAST	defs.h	172;"	d
AODV_EXT_DATA	defs.h	227;"	d
AODV_EXT_HDR_SIZE	defs.h	226;"	d
AODV_EXT_NEXT	defs.h	228;"	d
AODV_EXT_SIZE	defs.h	229;"	d
AODV_HELLO	defs.h	177;"	d
AODV_LOG_PATH	defs.h	72;"	d
AODV_LOG_PATH_PREFIX	defs.h	68;"	d
AODV_LOG_PATH_SUFFIX	defs.h	70;"	d
AODV_MSG_MAX_SIZE	aodv_socket.h	38;"	d
AODV_PORT	defs.h	174;"	d
AODV_PORT	lnx/kaodv.h	53;"	d
AODV_RERR	defs.h	180;"	d
AODV_RREP	defs.h	179;"	d
AODV_RREP_ACK	defs.h	181;"	d
AODV_RREQ	defs.h	178;"	d
AODV_RT_LOG_PATH	defs.h	73;"	d
AODV_RT_LOG_PATH_SUFFIX	defs.h	69;"	d
AODV_UU_VERSION	defs.h	63;"	d
AODV_ext	defs.h	/^} AODV_ext;$/;"	t	typeref:struct:__anon7
AODV_msg	defs.h	/^struct AODV_msg {$/;"	s
AODV_msg	defs.h	/^} AODV_msg;$/;"	v	typeref:struct:AODV_msg
AR	Makefile	/^AR=ar$/;"	m
ARM_CC	Makefile	/^ARM_CC=arm-linux-gcc$/;"	m
ARM_CCFLAGS	Makefile	/^ARM_CCFLAGS=-mbig-endian$/;"	m
ARM_INC	Makefile	/^ARM_INC=$/;"	m
ARM_LD	Makefile	/^ARM_LD=arm-linux-ld$/;"	m
AR_FLAGS	Makefile	/^AR_FLAGS=rc$/;"	m
ATTR_BUFLEN	nl.c	410;"	d	file:
BLACKLIST_TIMEOUT	params.h	48;"	d
BUFLEN	nl.c	69;"	d	file:
CALLBACK_FUNCS	main.c	260;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=$(OPTS) $(DEBUG) $(DEFS) $(XDEFS)$/;"	m
CMSG_NXTHDR_FIX	aodv_socket.h	58;"	d
CPP	Makefile	/^CPP=g++$/;"	m
CPP_OPTS	Makefile	/^CPP_OPTS=-Wall$/;"	m
DEBUG	Makefile	/^DEBUG=-g -DDEBUG$/;"	m
DEBUG	debug.h	52;"	d
DEBUG	debug.h	54;"	d
DEBUG	debug.h	56;"	d
DEBUG_OUTPUT	aodv_rreq.c	44;"	d	file:
DEBUG_OUTPUT	debug.h	53;"	d
DEFS	Makefile	/^DEFS=-DCONFIG_GATEWAY #-DLLFEEDBACK$/;"	m
DELETE_PERIOD	params.h	33;"	d
DELETE_PERIOD_HELLO	params.h	43;"	d
DELETE_PERIOD_LLF	params.h	38;"	d
DEV_IFINDEX	defs.h	168;"	d
DEV_NR	defs.h	169;"	d
DRAFT_VERSION	defs.h	64;"	d
EXPL_MAX_LEN	lnx/kaodv-expl.c	37;"	d	file:
EXTRA_NS_DEFS	Makefile	/^EXTRA_NS_DEFS=-DCONFIG_GATEWAY$/;"	m
FIRST_PREC	routing_table.h	38;"	d
HDR_AODVUU	defs.h	206;"	d
HELLO_DELAY	aodv_hello.c	289;"	d	file:
HELLO_INTERVAL	params.h	49;"	d
HOST_ADHOC	locality.h	/^    HOST_ADHOC,$/;"	e	enum:__anon11
HOST_INET	locality.h	/^    HOST_INET,$/;"	e	enum:__anon11
HOST_UNKNOWN	locality.h	/^    HOST_UNKNOWN$/;"	e	enum:__anon11
IFNAMSIZ	defs.h	84;"	d
INIT_LIST_ELM	list.h	39;"	d
INIT_LIST_HEAD	list.h	35;"	d
INVALID	routing_table.h	74;"	d
IPHDR_SIZE	aodv_socket.h	33;"	d
IPPROTO_MIPE	lnx/kaodv-ipenc.h	31;"	d
IP_DATA_MAX_LEN	seek_list.h	31;"	d
JITTER_INTERVAL	aodv_hello.h	35;"	d
K	params.h	28;"	d
KAODVM_ADDROUTE	lnx/kaodv-netlink.h	/^	KAODVM_ADDROUTE,$/;"	e	enum:__anon9
KAODVM_ADDROUTE	lnx/kaodv-netlink.h	50;"	d
KAODVM_BASE	lnx/kaodv-netlink.h	/^	KAODVM_BASE = 100,$/;"	e	enum:__anon9
KAODVM_BASE	lnx/kaodv-netlink.h	48;"	d
KAODVM_CONFIG	lnx/kaodv-netlink.h	/^	KAODVM_CONFIG,$/;"	e	enum:__anon9
KAODVM_CONFIG	lnx/kaodv-netlink.h	66;"	d
KAODVM_DEBUG	lnx/kaodv-netlink.h	/^	KAODVM_DEBUG,$/;"	e	enum:__anon9
KAODVM_DEBUG	lnx/kaodv-netlink.h	68;"	d
KAODVM_DELROUTE	lnx/kaodv-netlink.h	/^	KAODVM_DELROUTE,$/;"	e	enum:__anon9
KAODVM_DELROUTE	lnx/kaodv-netlink.h	52;"	d
KAODVM_MAX	lnx/kaodv-netlink.h	70;"	d
KAODVM_NOROUTE_FOUND	lnx/kaodv-netlink.h	/^	KAODVM_NOROUTE_FOUND,$/;"	e	enum:__anon9
KAODVM_NOROUTE_FOUND	lnx/kaodv-netlink.h	60;"	d
KAODVM_REPAIR	lnx/kaodv-netlink.h	/^	KAODVM_REPAIR,$/;"	e	enum:__anon9
KAODVM_REPAIR	lnx/kaodv-netlink.h	58;"	d
KAODVM_ROUTE_REQ	lnx/kaodv-netlink.h	/^	KAODVM_ROUTE_REQ,$/;"	e	enum:__anon9
KAODVM_ROUTE_REQ	lnx/kaodv-netlink.h	56;"	d
KAODVM_ROUTE_UPDATE	lnx/kaodv-netlink.h	/^	KAODVM_ROUTE_UPDATE,$/;"	e	enum:__anon9
KAODVM_ROUTE_UPDATE	lnx/kaodv-netlink.h	62;"	d
KAODVM_SEND_RERR	lnx/kaodv-netlink.h	/^	KAODVM_SEND_RERR,$/;"	e	enum:__anon9
KAODVM_SEND_RERR	lnx/kaodv-netlink.h	64;"	d
KAODVM_TIMEOUT	lnx/kaodv-netlink.h	/^	KAODVM_TIMEOUT,$/;"	e	enum:__anon9
KAODVM_TIMEOUT	lnx/kaodv-netlink.h	54;"	d
KAODV_DEBUG	lnx/kaodv-debug.h	29;"	d
KAODV_DEBUG	lnx/kaodv-debug.h	31;"	d
KAODV_QUEUE_DROP	lnx/kaodv-queue.h	25;"	d
KAODV_QUEUE_PROC_FS_NAME	lnx/kaodv-queue.c	47;"	d	file:
KAODV_QUEUE_QMAX_DEFAULT	lnx/kaodv-queue.c	46;"	d	file:
KAODV_QUEUE_SEND	lnx/kaodv-queue.h	26;"	d
KAODV_RT_GW_ENCAP	lnx/kaodv-netlink.h	112;"	d
KAODV_RT_REPAIR	lnx/kaodv-netlink.h	113;"	d
KCC	lnx/Makefile	/^KCC=gcc$/;"	m
KCFLAGS	lnx/Makefile	/^KCFLAGS=-Wall -Wno-strict-aliasing -O2 $(KDEFS) $(KINC) $(XDEFS)$/;"	m
KCFLAGS_ARM	lnx/Makefile	/^KCFLAGS_ARM=-Wall -O2 -D__KERNEL__ -DMODULE -nostdinc $(shell $(ARM_CC) -print-search-dirs | sed -ne 's\/install: \\(.*\\)\/-I \\1include\/gp') -I$(KERNEL_INC)$/;"	m
KCFLAGS_MIPS	lnx/Makefile	/^KCFLAGS_MIPS=-Wall -mips2 -O2 -fno-pic -mno-abicalls -mlong-calls -G0 -msoft-float -D__KERNEL__ -DMODULE -nostdinc $(shell $(MIPS_CC) -print-search-dirs | sed -ne 's\/install: \\(.*\\)\/-I \\1include\/gp') -I$(KERNEL_INC) $(XDEFS)$/;"	m
KDEFS	lnx/Makefile	/^KDEFS=-D__KERNEL__ -DMODULE$/;"	m
KERNEL	Makefile	/^KERNEL=$(shell uname -r)$/;"	m
KERNEL	lnx/Makefile	/^KERNEL=$(shell uname -r)$/;"	m
KERNEL_DIR	Makefile	/^KERNEL_DIR=\/lib\/modules\/$(KERNEL)\/build$/;"	m
KERNEL_DIR	lnx/Makefile	/^KERNEL_DIR=\/lib\/modules\/$(KERNEL)\/build$/;"	m
KERNEL_INC	Makefile	/^KERNEL_INC=$(KERNEL_DIR)\/include$/;"	m
KERNEL_INC	lnx/Makefile	/^KERNEL_INC=$(KERNEL_DIR)\/include$/;"	m
KINC	lnx/Makefile	/^KINC=-nostdinc -DMODVERSIONS -include $(KERNEL_INC)\/linux\/modversions.h $(shell $(CC) -print-search-dirs | sed -ne 's\/install: \\(.*\\)\/-I \\1include\/gp') -I$(KERNEL_INC)$/;"	m
KOBJS	lnx/Makefile	/^KOBJS := kaodv-mod.o kaodv-debug.o kaodv-netlink.o kaodv-queue.o kaodv-ipenc.o kaodv-expl.o$/;"	m
KOBJS_ARM	lnx/Makefile	/^KOBJS_ARM := $(KOBJS:%.o=%-arm.o)$/;"	m
KOBJS_MIPS	lnx/Makefile	/^KOBJS_MIPS := $(KOBJS:%.o=%-mips.o)$/;"	m
LD	Makefile	/^LD=ld$/;"	m
LD	lnx/Makefile	/^LD=ld$/;"	m
LD_OPTS	Makefile	/^LD_OPTS:=$(LD_OPTS) -liw$/;"	m
LD_OPTS	Makefile	/^LD_OPTS=$/;"	m
LIST	list.h	33;"	d
LIST_NULL	list.h	30;"	d
LIST_SUCCESS	list.h	31;"	d
LOCAL_ADD_TTL	params.h	50;"	d
MAX_IFINDEX	defs.h	81;"	d
MAX_INTERFACES	lnx/kaodv-mod.c	64;"	d	file:
MAX_NR_INTERFACES	defs.h	80;"	d
MAX_REPAIR_TTL	params.h	51;"	d
MINTTL	defs.h	78;"	d
MIPS_CC	Makefile	/^MIPS_CC=mipsel-linux-gcc$/;"	m
MIPS_LD	Makefile	/^MIPS_LD=mipsel-linux-ld$/;"	m
MY_ROUTE_TIMEOUT	params.h	52;"	d
NETLINK_AODV	lnx/kaodv-netlink.h	33;"	d
NET_DIAMETER	params.h	53;"	d
NET_KAODV_QUEUE_QMAX	lnx/kaodv-queue.c	48;"	d	file:
NET_KAODV_QUEUE_QMAX_NAME	lnx/kaodv-queue.c	49;"	d	file:
NET_TRAVERSAL_TIME	params.h	54;"	d
NEXT_HOP_WAIT	params.h	55;"	d
NF_INET_FORWARD	lnx/kaodv-mod.c	57;"	d	file:
NF_INET_LOCAL_IN	lnx/kaodv-mod.c	56;"	d	file:
NF_INET_LOCAL_OUT	lnx/kaodv-mod.c	58;"	d	file:
NF_INET_NUMHOOKS	lnx/kaodv-mod.c	60;"	d	file:
NF_INET_POST_ROUTING	lnx/kaodv-mod.c	59;"	d	file:
NF_INET_PRE_ROUTING	lnx/kaodv-mod.c	55;"	d	file:
NODE_TRAVERSAL_TIME	params.h	56;"	d
NS_CFLAGS	Makefile	/^NS_CFLAGS=$(OPTS) $(CPP_OPTS) $(DEBUG) $(NS_DEFS) $(EXTRA_NS_DEFS)$/;"	m
NS_CLASS	defs.h	49;"	d
NS_CLASS	defs.h	57;"	d
NS_DEFS	Makefile	/^NS_DEFS= # DON'T CHANGE (overridden by NS Makefile)$/;"	m
NS_DEV_NR	defs.h	54;"	d
NS_DIR	Makefile	/^NS_DIR=ns-2$/;"	m
NS_IFINDEX	defs.h	55;"	d
NS_INC	Makefile	/^NS_INC= # DON'T CHANGE (overridden by NS Makefile)$/;"	m
NS_INLINE	defs.h	52;"	d
NS_INLINE	defs.h	60;"	d
NS_OUTSIDE_CLASS	defs.h	50;"	d
NS_OUTSIDE_CLASS	defs.h	58;"	d
NS_STATIC	defs.h	51;"	d
NS_STATIC	defs.h	59;"	d
NS_TARGET	Makefile	/^NS_TARGET=libaodv-uu.a$/;"	m
OBJS	Makefile	/^OBJS =	$(SRC:%.c=%.o)$/;"	m
OBJS_ARM	Makefile	/^OBJS_ARM = $(SRC:%.c=%-arm.o)$/;"	m
OBJS_MIPS	Makefile	/^OBJS_MIPS = $(SRC:%.c=%-mips.o)$/;"	m
OBJS_NS	Makefile	/^OBJS_NS = $(SRC_NS:%.c=%-ns.o)$/;"	m
OBJS_NS_CPP	Makefile	/^OBJS_NS_CPP = $(SRC_NS_CPP:%.cc=%-ns.o)$/;"	m
OPTS	Makefile	/^OPTS=-Wall -O3$/;"	m
PATCHLEVEL	lnx/Makefile	/^PATCHLEVEL=$(shell grep ^PATCHLEVEL $(KERNEL_DIR)\/Makefile | cut -d' ' -f 3)$/;"	m
PATH_DISCOVERY_TIME	params.h	57;"	d
PKT_INBOUND	lnx/kaodv-netlink.h	116;"	d
PKT_OUTBOUND	lnx/kaodv-netlink.h	117;"	d
RCV_SKB_FAIL	lnx/kaodv-netlink.c	254;"	d	file:
RECV_BUF_SIZE	aodv_socket.h	39;"	d
RERR	aodv_rerr.h	/^} RERR;$/;"	t	typeref:struct:__anon1
RERR_CALC_SIZE	aodv_rerr.h	64;"	d
RERR_NODELETE	aodv_rerr.h	33;"	d
RERR_RATELIMIT	params.h	58;"	d
RERR_SIZE	aodv_rerr.h	52;"	d
RERR_UDEST_FIRST	aodv_rerr.h	65;"	d
RERR_UDEST_NEXT	aodv_rerr.h	66;"	d
RERR_UDEST_SIZE	aodv_rerr.h	60;"	d
RERR_udest	aodv_rerr.h	/^} RERR_udest;$/;"	t	typeref:struct:__anon2
RING_TRAVERSAL_TIME	params.h	59;"	d
ROUTE_TIMEOUT_SLACK	aodv_hello.h	34;"	d
RREP	aodv_rrep.h	/^} RREP;$/;"	t	typeref:struct:__anon3
RREP_ACK	aodv_rrep.h	34;"	d
RREP_ACK_SIZE	aodv_rrep.h	68;"	d
RREP_EXT	defs.h	213;"	d
RREP_HELLO_INTERVAL_EXT	defs.h	214;"	d
RREP_HELLO_NEIGHBOR_SET_EXT	defs.h	215;"	d
RREP_INET_DEST_EXT	defs.h	216;"	d
RREP_REPAIR	aodv_rrep.h	35;"	d
RREP_SIZE	aodv_rrep.h	61;"	d
RREP_ack	aodv_rrep.h	/^} RREP_ack;$/;"	t	typeref:struct:__anon4
RREQ	aodv_rreq.h	/^} RREQ;$/;"	t	typeref:struct:__anon5
RREQ_DEST_ONLY	aodv_rreq.h	37;"	d
RREQ_EXT	defs.h	212;"	d
RREQ_GRATUITOUS	aodv_rreq.h	36;"	d
RREQ_JOIN	aodv_rreq.h	34;"	d
RREQ_RATELIMIT	params.h	61;"	d
RREQ_REPAIR	aodv_rreq.h	35;"	d
RREQ_RETRIES	params.h	60;"	d
RREQ_SIZE	aodv_rreq.h	65;"	d
RT_GATEWAY	routing_table.h	71;"	d
RT_INET_DEST	routing_table.h	69;"	d
RT_INV_SEQNO	routing_table.h	68;"	d
RT_REPAIR	routing_table.h	67;"	d
RT_TABLEMASK	routing_table.h	79;"	d
RT_TABLESIZE	routing_table.h	78;"	d
RT_UNIDIR	routing_table.h	66;"	d
SEND_BUF_SIZE	aodv_socket.h	40;"	d
SKB_MAC_HDR_RAW	lnx/kaodv.h	29;"	d
SKB_MAC_HDR_RAW	lnx/kaodv.h	35;"	d
SKB_NETWORK_HDR_IPH	lnx/kaodv.h	34;"	d
SKB_NETWORK_HDR_RAW	lnx/kaodv.h	27;"	d
SKB_NETWORK_HDR_RAW	lnx/kaodv.h	33;"	d
SKB_NETWORK_HDR_RIPH	lnx/kaodv.h	28;"	d
SKB_SET_NETWORK_HDR	lnx/kaodv.h	30;"	d
SKB_SET_NETWORK_HDR	lnx/kaodv.h	36;"	d
SKB_TAIL_PTR	lnx/kaodv.h	26;"	d
SKB_TAIL_PTR	lnx/kaodv.h	32;"	d
SO_RECVBUF_SIZE	aodv_socket.c	46;"	d	file:
SRC	Makefile	/^SRC =	main.c list.c debug.c timer_queue.c aodv_socket.c aodv_hello.c \\$/;"	m
SRC	Makefile	/^SRC:=$(SRC) llf.c$/;"	m
SRC	Makefile	/^SRC:=$(SRC) locality.c$/;"	m
SRC_NS	Makefile	/^SRC_NS = 	debug.c list.c timer_queue.c aodv_socket.c aodv_hello.c \\$/;"	m
SRC_NS	Makefile	/^SRC_NS:=$(SRC_NS) locality.c$/;"	m
SRC_NS_CPP	Makefile	/^SRC_NS_CPP =	$(NS_DIR)\/aodv-uu.cc $(NS_DIR)\/packet_queue.cc $(NS_DIR)\/packet_input.cc$/;"	m
SUBLEVEL	lnx/Makefile	/^SUBLEVEL=$(shell grep ^SUBLEVEL $(KERNEL_DIR)\/Makefile | cut -d' ' -f 3)$/;"	m
THIS_DIR	lnx/Makefile	/^THIS_DIR=$(shell pwd)$/;"	m
TIMEOUT_BUFFER	params.h	62;"	d
TTL_INCREMENT	params.h	63;"	d
TTL_START	params.h	32;"	d
TTL_START_HELLO	params.h	42;"	d
TTL_START_LLF	params.h	37;"	d
TTL_THRESHOLD	params.h	64;"	d
TTL_VALUE	aodv_rreq.c	428;"	d	file:
TTL_VALUE	aodv_timeout.c	57;"	d	file:
VALID	routing_table.h	75;"	d
VERSION	lnx/Makefile	/^VERSION=$(shell if [ ! -d $(KERNEL_DIR) ]; then echo "No linux source found!!! Check your setup..."; exit; fi; grep ^VERSION $(KERNEL_DIR)\/Makefile | cut -d' ' -f 3)$/;"	m
XDEFS	Makefile	/^XDEFS=-DDEBUG$/;"	m
XDEFS	lnx/Makefile	/^XDEFS=$/;"	m
_AODV_HELLO_H	aodv_hello.h	24;"	d
_AODV_NEIGHBOR_H	aodv_neighbor.h	24;"	d
_AODV_RERR_H	aodv_rerr.h	24;"	d
_AODV_RREP_H	aodv_rrep.h	24;"	d
_AODV_RREQ_H	aodv_rreq.h	24;"	d
_AODV_SOCKET_H	aodv_socket.h	24;"	d
_AODV_TIMEOUT_H	aodv_timeout.h	24;"	d
_DEBUG_H	debug.h	23;"	d
_DEFS_H	defs.h	23;"	d
_KAODV_DEBUG_H	lnx/kaodv-debug.h	23;"	d
_KAODV_EXPL_H	lnx/kaodv-expl.h	23;"	d
_KAODV_H	lnx/kaodv.h	23;"	d
_KAODV_IPENC_H	lnx/kaodv-ipenc.h	25;"	d
_KAODV_MOD_H	lnx/kaodv-mod.h	2;"	d
_KAODV_NETLINK_H	lnx/kaodv-netlink.h	23;"	d
_KAODV_QUEUE_H	lnx/kaodv-queue.h	23;"	d
_LIST_H	list.h	23;"	d
_LLF_H	llf.h	23;"	d
_LOCALITY_H	locality.h	23;"	d
_NL_H	nl.h	23;"	d
_PARAMS_H	params.h	24;"	d
_ROUTING_TABLE_H	routing_table.h	24;"	d
_SEEK_LIST_H	seek_list.h	24;"	d
_TIMER_QUEUE_H	timer_queue.h	23;"	d
__AODVGRP_MAX	lnx/kaodv-netlink.h	/^  __AODVGRP_MAX$/;"	e	enum:__anon8
__KAODV_MAX	lnx/kaodv-netlink.h	/^	__KAODV_MAX,$/;"	e	enum:__anon9
__cmsg_nxthdr_fix	aodv_socket.c	/^static struct cmsghdr *__cmsg_nxthdr_fix(void *__ctl, size_t __size,$/;"	f	file:
__kaodv_expl_add	lnx/kaodv-expl.c	/^static inline int __kaodv_expl_add(struct expl_entry *e)$/;"	f	file:
__kaodv_expl_del	lnx/kaodv-expl.c	/^static inline int __kaodv_expl_del(struct expl_entry *e)$/;"	f	file:
__kaodv_expl_find	lnx/kaodv-expl.c	/^static inline struct expl_entry *__kaodv_expl_find(__u32 daddr)$/;"	f	file:
__kaodv_expl_flush	lnx/kaodv-expl.c	/^static inline void __kaodv_expl_flush(void)$/;"	f	file:
__kaodv_expl_set_next_timeout	lnx/kaodv-expl.c	/^static inline void __kaodv_expl_set_next_timeout(void)$/;"	f	file:
__kaodv_queue_enqueue_entry	lnx/kaodv-queue.c	/^static inline int __kaodv_queue_enqueue_entry(struct kaodv_queue_entry *entry)$/;"	f	file:
__kaodv_queue_find_dequeue_entry	lnx/kaodv-queue.c	/^*__kaodv_queue_find_dequeue_entry(kaodv_queue_cmpfn cmpfn, unsigned long data)$/;"	f	file:
__kaodv_queue_find_entry	lnx/kaodv-queue.c	/^*__kaodv_queue_find_entry(kaodv_queue_cmpfn cmpfn, unsigned long data)$/;"	f	file:
__kaodv_queue_flush	lnx/kaodv-queue.c	/^static inline void __kaodv_queue_flush(void)$/;"	f	file:
__kaodv_queue_reset	lnx/kaodv-queue.c	/^static inline void __kaodv_queue_reset(void)$/;"	f	file:
a	aodv_rrep.h	/^    u_int16_t a:1;$/;"	m	struct:__anon3
access	defs.h	/^    inline static AODV_msg *access(const Packet * p) {$/;"	f	struct:AODV_msg::__anon6
ack_timer	routing_table.h	/^    struct timer ack_timer;	\/* RREP_ack timer for this destination *\/$/;"	m	struct:rt_table	typeref:struct:rt_table::timer
active_route_timeout	lnx/kaodv-mod.c	/^int active_route_timeout = 3000;$/;"	v
active_route_timeout	lnx/kaodv-netlink.h	/^	int active_route_timeout;$/;"	m	struct:kaodv_conf_msg
active_route_timeout	main.c	/^int active_route_timeout = ACTIVE_ROUTE_TIMEOUT_HELLO;$/;"	v
addattr	nl.c	/^int addattr(struct nlmsghdr *n, int type, void *data, int alen)$/;"	f
alog	debug.c	/^void NS_CLASS alog(int type, int errnum, const char *function, char *format,$/;"	f
aodv_socket_cleanup	aodv_socket.c	/^void aodv_socket_cleanup(void)$/;"	f
aodv_socket_init	aodv_socket.c	/^void NS_CLASS aodv_socket_init()$/;"	f
aodv_socket_new_msg	aodv_socket.c	/^AODV_msg *NS_CLASS aodv_socket_new_msg(void)$/;"	f
aodv_socket_process_packet	aodv_socket.c	/^void NS_CLASS aodv_socket_process_packet(AODV_msg * aodv_msg, int len,$/;"	f
aodv_socket_queue_msg	aodv_socket.c	/^AODV_msg *NS_CLASS aodv_socket_queue_msg(AODV_msg * aodv_msg, int size)$/;"	f
aodv_socket_read	aodv_socket.c	/^static void aodv_socket_read(int fd)$/;"	f	file:
aodv_socket_send	aodv_socket.c	/^void NS_CLASS aodv_socket_send(AODV_msg * aodv_msg, struct in_addr dst,$/;"	f
aodvnl	nl.c	/^struct nlsock aodvnl;$/;"	v	typeref:struct:nlsock
attach_callback_func	main.c	/^int attach_callback_func(int fd, callback_func_t func)$/;"	f
bc_addr	lnx/kaodv-mod.h	/^	struct in_addr bc_addr;$/;"	m	struct:if_info	typeref:struct:if_info::in_addr
bcast_time	defs.h	/^    struct timeval bcast_time;	\/* The time of the last broadcast msg sent *\/$/;"	m	struct:host_info	typeref:struct:host_info::timeval
bigend	endian.c	/^int bigend(void)$/;"	f
bl_timer	aodv_rreq.h	/^    struct timer bl_timer;$/;"	m	struct:blacklist	typeref:struct:blacklist::timer
blacklist	aodv_rreq.h	/^struct blacklist {$/;"	s
broadcast	defs.h	/^    struct in_addr broadcast;$/;"	m	struct:dev_info	typeref:struct:dev_info::in_addr
callback	main.c	/^static struct callback {$/;"	s	file:
callback_func_t	defs.h	/^typedef void (*callback_func_t) (int);$/;"	t
callbacks	main.c	/^} callbacks[CALLBACK_FUNCS];$/;"	v	typeref:struct:callback	file:
check	lnx/kaodv-ipenc.h	/^    u_int16_t check;$/;"	m	struct:min_ipenc_hdr
cleanup	main.c	/^static void cleanup(void)$/;"	f	file:
cmsg_nxthdr_fix	aodv_socket.c	/^struct cmsghdr *cmsg_nxthdr_fix(struct msghdr *__msg, struct cmsghdr *__cmsg)$/;"	f
d	aodv_rreq.h	/^    u_int8_t d:1;		\/* Destination only respond *\/$/;"	m	struct:__anon5
d	aodv_rreq.h	/^    u_int8_t d:1;$/;"	m	struct:__anon5
daddr	lnx/kaodv-expl.h	/^	__u32 daddr;$/;"	m	struct:expl_entry
daddr	lnx/kaodv-ipenc.h	/^    u_int32_t daddr;$/;"	m	struct:min_ipenc_hdr
daddr	lnx/kaodv-queue.c	/^	__u32 daddr;$/;"	m	struct:kaodv_rt_info	file:
data	seek_list.h	/^    char data[IP_DATA_MAX_LEN];$/;"	m	struct:ip_data
data	timer_queue.h	/^    void *data;$/;"	m	struct:timer
debug	debug.c	/^int debug = 0;$/;"	v
delete_period	main.c	/^int delete_period = DELETE_PERIOD_HELLO;$/;"	v
dest_addr	aodv_rerr.h	/^    u_int32_t dest_addr;$/;"	m	struct:__anon1
dest_addr	aodv_rerr.h	/^    u_int32_t dest_addr;$/;"	m	struct:__anon2
dest_addr	aodv_rrep.h	/^    u_int32_t dest_addr;$/;"	m	struct:__anon3
dest_addr	aodv_rreq.h	/^    struct in_addr dest_addr;$/;"	m	struct:blacklist	typeref:struct:blacklist::in_addr
dest_addr	aodv_rreq.h	/^    u_int32_t dest_addr;$/;"	m	struct:__anon5
dest_addr	routing_table.h	/^    struct in_addr dest_addr;	\/* IP address of the destination *\/$/;"	m	struct:rt_table	typeref:struct:rt_table::in_addr
dest_addr	seek_list.h	/^    struct in_addr dest_addr;$/;"	m	struct:seek_list	typeref:struct:seek_list::in_addr
dest_cmp	lnx/kaodv-queue.c	/^static inline int dest_cmp(struct kaodv_queue_entry *e, unsigned long daddr)$/;"	f	file:
dest_count	aodv_rerr.h	/^    u_int8_t dest_count;$/;"	m	struct:__anon1
dest_seqno	aodv_rerr.h	/^    u_int32_t dest_seqno;$/;"	m	struct:__anon1
dest_seqno	aodv_rerr.h	/^    u_int32_t dest_seqno;$/;"	m	struct:__anon2
dest_seqno	aodv_rrep.h	/^    u_int32_t dest_seqno;$/;"	m	struct:__anon3
dest_seqno	aodv_rreq.h	/^    u_int32_t dest_seqno;$/;"	m	struct:__anon5
dest_seqno	routing_table.h	/^    u_int32_t dest_seqno;$/;"	m	struct:rt_table
dest_seqno	seek_list.h	/^    u_int32_t dest_seqno;$/;"	m	struct:seek_list
dev	lnx/kaodv-mod.h	/^	struct net_device *dev;$/;"	m	struct:if_info	typeref:struct:if_info::net_device
dev_indices	defs.h	/^unsigned int dev_indices[MAX_NR_INTERFACES];$/;"	v
dev_info	defs.h	/^struct dev_info {$/;"	s
devfromsock	defs.h	/^static inline struct dev_info *devfromsock(int sock)$/;"	f
devs	defs.h	/^        struct dev_info devs[MAX_NR_INTERFACES+1]; \/* Add +1 for returning as "error" in ifindex2devindex. *\/$/;"	m	struct:host_info	typeref:struct:host_info::dev_info
devs_ip_to_str	debug.c	/^char *NS_CLASS devs_ip_to_str()$/;"	f
dst	lnx/kaodv-netlink.h	/^	u_int32_t dst;$/;"	m	struct:kaodv_rt_msg
dump	llf.c	/^    u_int32_t dump;$/;"	m	struct:rtnl_handle	file:
enabled	defs.h	/^    int enabled;		\/* 1 if struct is used, else 0 *\/$/;"	m	struct:dev_info
expanding_ring_search	main.c	/^int expanding_ring_search = 1;$/;"	v
expires	lnx/kaodv-expl.h	/^	unsigned long expires;$/;"	m	struct:expl_entry
expl_entry	lnx/kaodv-expl.h	/^struct expl_entry {$/;"	s
expl_len	lnx/kaodv-expl.c	/^static unsigned int expl_len;$/;"	v	file:
expl_lock	lnx/kaodv-expl.c	/^static rwlock_t expl_lock = RW_LOCK_UNLOCKED;$/;"	v	file:
expl_timer	lnx/kaodv-expl.c	/^static struct timer_list expl_timer;$/;"	v	typeref:struct:timer_list	file:
fd	llf.c	/^    int fd;$/;"	m	struct:rtnl_handle	file:
fd	main.c	/^    int fd;$/;"	m	struct:callback	file:
find_default_gw	main.c	/^int find_default_gw(void)$/;"	f
flags	lnx/kaodv-expl.h	/^	unsigned short flags;$/;"	m	struct:expl_entry
flags	lnx/kaodv-netlink.h	/^	u_int8_t flags;$/;"	m	struct:kaodv_rt_msg
flags	routing_table.h	/^    u_int16_t flags;		\/* Routing flags *\/$/;"	m	struct:rt_table
flags	seek_list.h	/^    u_int8_t flags;		\/* The flags we are using for resending the RREQ *\/$/;"	m	struct:seek_list
func	main.c	/^    callback_func_t func;$/;"	m	struct:callback	file:
fwd_time	defs.h	/^    struct timeval fwd_time;	\/* The time a data packet was last forwarded *\/$/;"	m	struct:host_info	typeref:struct:host_info::timeval
g	aodv_rreq.h	/^    u_int8_t g:1;		\/* Gratuitous RREP flag *\/$/;"	m	struct:__anon5
g	aodv_rreq.h	/^    u_int8_t g:1;$/;"	m	struct:__anon5
get_if_info	main.c	/^struct sockaddr_in *get_if_info(char *ifname, int type)$/;"	f
gw_prefix	main.c	/^int gw_prefix = 1;$/;"	v
handler	timer_queue.h	/^    timeout_func_t handler;$/;"	m	struct:timer
has_range	llf.c	/^    int has_range;$/;"	m	struct:wireless_iface	file:
hash	routing_table.h	/^    hash_value hash;$/;"	m	struct:rt_table
hash_value	routing_table.h	/^typedef u_int32_t hash_value;	\/* A hash value *\/$/;"	t
hashing	routing_table.c	/^unsigned int hashing(struct in_addr *addr, hash_value * hash)$/;"	f
hcnt	aodv_rrep.h	/^    u_int8_t hcnt;$/;"	m	struct:__anon3
hcnt	aodv_rreq.h	/^    u_int8_t hcnt;$/;"	m	struct:__anon5
hcnt	routing_table.h	/^    u_int8_t hcnt;		\/* Distance (in hops) to the destination *\/$/;"	m	struct:rt_table
hdr_aodvuu	defs.h	/^typedef AODV_msg hdr_aodvuu;	\/\/ Name convention for headers$/;"	t	struct:AODV_msg
hello_cnt	routing_table.h	/^    u_int8_t hello_cnt;$/;"	m	struct:rt_table
hello_jitter	aodv_hello.c	/^long NS_CLASS hello_jitter()$/;"	f
hello_jittering	main.c	/^int hello_jittering = 1;$/;"	v
hello_process	aodv_hello.c	/^void NS_CLASS hello_process(RREP * hello, int rreplen, unsigned int ifindex)$/;"	f
hello_send	aodv_hello.c	/^void NS_CLASS hello_send(void *arg)$/;"	f
hello_start	aodv_hello.c	/^void NS_CLASS hello_start()$/;"	f
hello_stop	aodv_hello.c	/^void NS_CLASS hello_stop()$/;"	f
hello_timeout	aodv_timeout.c	/^void NS_CLASS hello_timeout(void *arg)$/;"	f
hello_timer	aodv_hello.c	/^static struct timer hello_timer;$/;"	v	typeref:struct:timer	file:
hello_timer	routing_table.h	/^    struct timer hello_timer;$/;"	m	struct:rt_table	typeref:struct:rt_table::timer
hello_update_timeout	aodv_hello.c	/^NS_INLINE void NS_CLASS hello_update_timeout(rt_table_t * rt,$/;"	f
host_info	defs.h	/^struct host_info {$/;"	s
host_init	main.c	/^void host_init(char *ifname)$/;"	f
htonl	debug.c	452;"	d	file:
if_addr	lnx/kaodv-mod.h	/^	struct in_addr if_addr;$/;"	m	struct:if_info	typeref:struct:if_info::in_addr
if_info	lnx/kaodv-mod.h	/^struct if_info {$/;"	s
if_info_add	lnx/kaodv-mod.h	/^static inline int if_info_add(struct net_device *dev)$/;"	f
if_info_from_ifindex	lnx/kaodv-mod.h	/^static inline int if_info_from_ifindex(struct in_addr *ifa, struct in_addr *bc,$/;"	f
if_info_purge	lnx/kaodv-mod.h	/^static inline void if_info_purge(void)$/;"	f
ifilock	lnx/kaodv-mod.h	/^static rwlock_t ifilock = RW_LOCK_UNLOCKED;$/;"	v
ifindex	defs.h	/^    unsigned int ifindex;$/;"	m	struct:dev_info
ifindex	llf.c	/^    int ifindex;		\/* Interface index == black magic *\/$/;"	m	struct:wireless_iface	file:
ifindex	lnx/kaodv-expl.h	/^	int ifindex;$/;"	m	struct:expl_entry
ifindex	lnx/kaodv-netlink.h	/^	int ifindex;$/;"	m	struct:kaodv_rt_msg
ifindex	routing_table.h	/^    unsigned int ifindex;	\/* Network interface index... *\/$/;"	m	struct:rt_table
ifindex2devindex	defs.h	/^static inline unsigned int ifindex2devindex(unsigned int ifindex)$/;"	f
ifname	defs.h	/^    char ifname[IFNAMSIZ];$/;"	m	struct:dev_info
ifname	llf.c	/^    char ifname[IFNAMSIZ + 1];	\/* Interface name *\/$/;"	m	struct:wireless_iface	file:
ifname	lnx/kaodv-mod.c	/^static char *ifname[MAX_INTERFACES] = { "eth0" };$/;"	v	file:
index2name	llf.c	/^static inline int index2name(int skfd, int ifindex, char *name)$/;"	f	file:
init_or_cleanup	lnx/kaodv-queue.c	/^static int init_or_cleanup(int init)$/;"	f	file:
interface_cache	llf.c	/^struct wireless_iface *interface_cache = NULL;$/;"	v	typeref:struct:wireless_iface
internet_gw_mode	main.c	/^int internet_gw_mode = 0;$/;"	v
ip_csum	lnx/kaodv-ipenc.c	/^static u_int16_t ip_csum(unsigned short *buf, int nshorts)$/;"	f	file:
ip_data	seek_list.h	/^struct ip_data {$/;"	s
ip_pkt_decapsulate	lnx/kaodv-ipenc.c	/^struct sk_buff *ip_pkt_decapsulate(struct sk_buff *skb)$/;"	f
ip_pkt_encapsulate	lnx/kaodv-ipenc.c	/^struct sk_buff *ip_pkt_encapsulate(struct sk_buff *skb, __u32 dest)$/;"	f
ip_to_str	debug.c	/^char *NS_CLASS ip_to_str(struct in_addr addr)$/;"	f
ipaddr	defs.h	/^    struct in_addr ipaddr;	\/* The local IP address *\/$/;"	m	struct:dev_info	typeref:struct:dev_info::in_addr
ipd	seek_list.h	/^    struct ip_data *ipd;$/;"	m	struct:seek_list	typeref:struct:seek_list::ip_data
is_gateway	lnx/kaodv-mod.c	/^int is_gateway = 1;$/;"	v
is_gateway	lnx/kaodv-netlink.h	/^	int is_gateway;$/;"	m	struct:kaodv_conf_msg
iw_get_interface_data	llf.c	/^static struct wireless_iface *iw_get_interface_data(int ifindex)$/;"	f	file:
j	aodv_rreq.h	/^    u_int8_t j:1;		\/* Join flag (multicast) *\/$/;"	m	struct:__anon5
j	aodv_rreq.h	/^    u_int8_t j:1;$/;"	m	struct:__anon5
kaodv-objs	lnx/Makefile	/^kaodv-objs := kaodv-mod.o kaodv-debug.o kaodv-netlink.o kaodv-queue.o kaodv-ipenc.o kaodv-expl.o $/;"	m
kaodv_conf_msg	lnx/kaodv-netlink.h	/^typedef struct kaodv_conf_msg {$/;"	s
kaodv_conf_msg_t	lnx/kaodv-netlink.h	/^} kaodv_conf_msg_t;$/;"	t	typeref:struct:kaodv_conf_msg
kaodv_exit	lnx/kaodv-mod.c	/^module_exit(kaodv_exit);$/;"	v
kaodv_exit	lnx/kaodv-mod.c	/^static void __exit kaodv_exit(void)$/;"	f	file:
kaodv_expl_add	lnx/kaodv-expl.c	/^int kaodv_expl_add(__u32 daddr, __u32 nhop, unsigned long time,$/;"	f
kaodv_expl_del	lnx/kaodv-expl.c	/^int kaodv_expl_del(__u32 daddr)$/;"	f
kaodv_expl_fini	lnx/kaodv-expl.c	/^void kaodv_expl_fini(void)$/;"	f
kaodv_expl_flush	lnx/kaodv-expl.c	/^void kaodv_expl_flush(void)$/;"	f
kaodv_expl_get	lnx/kaodv-expl.c	/^int kaodv_expl_get(__u32 daddr, struct expl_entry *e_in)$/;"	f
kaodv_expl_init	lnx/kaodv-expl.c	/^void kaodv_expl_init(void)$/;"	f
kaodv_expl_print	lnx/kaodv-expl.c	/^static int kaodv_expl_print(char *buf)$/;"	f	file:
kaodv_expl_proc_info	lnx/kaodv-expl.c	/^kaodv_expl_proc_info(char *buffer, char **start, off_t offset, int length)$/;"	f	file:
kaodv_expl_proc_info	lnx/kaodv-expl.c	/^static int kaodv_expl_proc_info(char *page, char **start, off_t off, int count,$/;"	f	file:
kaodv_expl_timeout	lnx/kaodv-expl.c	/^static void kaodv_expl_timeout(unsigned long data)$/;"	f	file:
kaodv_expl_update	lnx/kaodv-expl.c	/^int kaodv_expl_update(__u32 daddr, __u32 nhop, unsigned long time,$/;"	f
kaodv_hook	lnx/kaodv-mod.c	/^static unsigned int kaodv_hook(unsigned int hooknum,$/;"	f	file:
kaodv_init	lnx/kaodv-mod.c	/^module_init(kaodv_init);$/;"	v
kaodv_init	lnx/kaodv-mod.c	/^static int __init kaodv_init(void)$/;"	f	file:
kaodv_msg_type_to_str	lnx/kaodv-netlink.h	/^static inline char *kaodv_msg_type_to_str(int type)$/;"	f
kaodv_netlink_build_msg	lnx/kaodv-netlink.c	/^static struct sk_buff *kaodv_netlink_build_msg(int type, void *data, int len)$/;"	f	file:
kaodv_netlink_fini	lnx/kaodv-netlink.c	/^void kaodv_netlink_fini(void)$/;"	f
kaodv_netlink_init	lnx/kaodv-netlink.c	/^int kaodv_netlink_init(void)$/;"	f
kaodv_netlink_rcv_nl_event	lnx/kaodv-netlink.c	/^static int kaodv_netlink_rcv_nl_event(struct notifier_block *this,$/;"	f	file:
kaodv_netlink_rcv_skb	lnx/kaodv-netlink.c	/^static inline void kaodv_netlink_rcv_skb(struct sk_buff *skb)$/;"	f	file:
kaodv_netlink_receive_peer	lnx/kaodv-netlink.c	/^static int kaodv_netlink_receive_peer(unsigned char type, void *msg,$/;"	f	file:
kaodv_netlink_send_debug_msg	lnx/kaodv-netlink.c	/^void kaodv_netlink_send_debug_msg(char *buf, int len)$/;"	f
kaodv_netlink_send_rerr_msg	lnx/kaodv-netlink.c	/^void kaodv_netlink_send_rerr_msg(int type, __u32 src, __u32 dest, int ifindex)$/;"	f
kaodv_netlink_send_rt_msg	lnx/kaodv-netlink.c	/^void kaodv_netlink_send_rt_msg(int type, __u32 src, __u32 dest)$/;"	f
kaodv_netlink_send_rt_update_msg	lnx/kaodv-netlink.c	/^void kaodv_netlink_send_rt_update_msg(int type, __u32 src, __u32 dest,$/;"	f
kaodv_nl_notifier	lnx/kaodv-netlink.c	/^static struct notifier_block kaodv_nl_notifier = {$/;"	v	typeref:struct:notifier_block	file:
kaodv_ops	lnx/kaodv-mod.c	/^static struct nf_hook_ops kaodv_ops[] = {$/;"	v	typeref:struct:nf_hook_ops	file:
kaodv_proc_info	lnx/kaodv-mod.c	/^int kaodv_proc_info(char *buffer, char **start, off_t offset, int length)$/;"	f
kaodv_queue_cmpfn	lnx/kaodv-queue.c	/^typedef int (*kaodv_queue_cmpfn) (struct kaodv_queue_entry *, unsigned long);$/;"	t	file:
kaodv_queue_enqueue_packet	lnx/kaodv-queue.c	/^kaodv_queue_enqueue_packet(struct sk_buff *skb, int (*okfn) (struct sk_buff *))$/;"	f
kaodv_queue_entry	lnx/kaodv-queue.c	/^struct kaodv_queue_entry {$/;"	s	file:
kaodv_queue_find	lnx/kaodv-queue.c	/^int kaodv_queue_find(__u32 daddr)$/;"	f
kaodv_queue_find_dequeue_entry	lnx/kaodv-queue.c	/^*kaodv_queue_find_dequeue_entry(kaodv_queue_cmpfn cmpfn, unsigned long data)$/;"	f	file:
kaodv_queue_fini	lnx/kaodv-queue.c	/^void kaodv_queue_fini(void)$/;"	f
kaodv_queue_flush	lnx/kaodv-queue.c	/^void kaodv_queue_flush(void)$/;"	f
kaodv_queue_get_info	lnx/kaodv-queue.c	/^static int kaodv_queue_get_info(char *buffer, char **start, off_t offset, int length)$/;"	f	file:
kaodv_queue_get_info	lnx/kaodv-queue.c	/^static int kaodv_queue_get_info(char *page, char **start, off_t off, int count,$/;"	f	file:
kaodv_queue_init	lnx/kaodv-queue.c	/^int kaodv_queue_init(void)$/;"	f
kaodv_queue_set_verdict	lnx/kaodv-queue.c	/^int kaodv_queue_set_verdict(int verdict, __u32 daddr)$/;"	f
kaodv_read_proc	lnx/kaodv-mod.c	/^static int kaodv_read_proc(char *page, char **start, off_t off, int count,$/;"	f	file:
kaodv_rt_info	lnx/kaodv-queue.c	/^struct kaodv_rt_info {$/;"	s	file:
kaodv_rt_msg	lnx/kaodv-netlink.h	/^typedef struct kaodv_rt_msg { $/;"	s
kaodv_rt_msg_t	lnx/kaodv-netlink.h	/^} kaodv_rt_msg_t;$/;"	t	typeref:struct:kaodv_rt_msg
kaodv_update_route_timeouts	lnx/kaodv-mod.c	/^void kaodv_update_route_timeouts(int hooknum, const struct net_device *dev,$/;"	f
kaodvnl	lnx/kaodv-netlink.c	/^static struct sock *kaodvnl;$/;"	v	typeref:struct:sock	file:
l	aodv_rreq.h	/^    list_t l;$/;"	m	struct:blacklist
l	aodv_rreq.h	/^    list_t l;$/;"	m	struct:rreq_record
l	lnx/kaodv-expl.h	/^	struct list_head l;$/;"	m	struct:expl_entry	typeref:struct:expl_entry::list_head
l	lnx/kaodv-mod.h	/^	struct list_head l;$/;"	m	struct:if_info	typeref:struct:if_info::list_head
l	routing_table.h	/^    list_t l;$/;"	m	struct:precursor
l	routing_table.h	/^    list_t l;$/;"	m	struct:rt_table
l	seek_list.h	/^    list_t l;$/;"	m	struct:seek_list
l	timer_queue.h	/^    list_t l;$/;"	m	struct:timer
last_hello_time	routing_table.h	/^    struct timeval last_hello_time;$/;"	m	struct:rt_table	typeref:struct:rt_table::timeval
len	seek_list.h	/^    int len;$/;"	m	struct:ip_data
length	defs.h	/^    u_int8_t length;$/;"	m	struct:__anon7
lifetime	aodv_rrep.h	/^    u_int32_t lifetime;$/;"	m	struct:__anon3
list	lnx/kaodv-queue.c	/^	struct list_head list;$/;"	m	struct:kaodv_queue_entry	typeref:struct:kaodv_queue_entry::list_head	file:
list_add	list.c	/^int list_add(list_t * head, list_t * le)$/;"	f
list_add_tail	list.c	/^int list_add_tail(list_t * head, list_t * le)$/;"	f
list_detach	list.c	/^int list_detach(list_t * le)$/;"	f
list_empty	list.h	54;"	d
list_first	list.h	56;"	d
list_foreach	list.h	47;"	d
list_foreach_safe	list.h	50;"	d
list_is_first	lnx/kaodv-expl.c	43;"	d	file:
list_t	list.h	/^typedef struct list_t {$/;"	s
list_t	list.h	/^} list_t;$/;"	t	typeref:struct:list_t
list_unattached	list.h	58;"	d
listelm_add	list.c	/^static inline int listelm_add(list_t * le, list_t * prev, list_t * next)$/;"	f	file:
listelm_detach	list.c	/^static inline int listelm_detach(list_t * prev, list_t * next)$/;"	f	file:
litend	endian.c	/^int litend(void)$/;"	f
llf_callback	llf.c	/^static void llf_callback(int fd)$/;"	f	file:
llf_cleanup	llf.c	/^void llf_cleanup()$/;"	f
llf_handle_netlink_events	llf.c	/^static inline void llf_handle_netlink_events(struct rtnl_handle *rth)$/;"	f	file:
llf_init	llf.c	/^void llf_init()$/;"	f
llf_print_event	llf.c	/^static inline int llf_print_event(struct iw_event *event,$/;"	f	file:
llf_rtnl_open	llf.c	/^static inline int llf_rtnl_open(struct rtnl_handle *rth, unsigned subscriptions)$/;"	f	file:
llfeedback	main.c	/^int llfeedback = 0;$/;"	v
load_modules	main.c	/^void load_modules(char *ifname)$/;"	f
local	llf.c	/^    struct sockaddr_nl local;$/;"	m	struct:rtnl_handle	typeref:struct:rtnl_handle::sockaddr_nl	file:
local	nl.c	/^	struct sockaddr_nl local;$/;"	m	struct:nlsock	typeref:struct:nlsock::sockaddr_nl	file:
local_repair	main.c	/^int local_repair = 0;$/;"	v
local_repair_timeout	aodv_timeout.c	/^void NS_CLASS local_repair_timeout(void *arg)$/;"	f
locality	locality.c	/^int NS_CLASS locality(struct in_addr dest, unsigned int ifindex)$/;"	f
log_cleanup	debug.c	/^void NS_CLASS log_cleanup()$/;"	f
log_file_fd	debug.c	/^int log_file_fd = -1;$/;"	v
log_init	debug.c	/^void NS_CLASS log_init()$/;"	f
log_nmsgs	debug.c	/^int log_nmsgs = 0;$/;"	v
log_pkt_fields	debug.c	/^void NS_CLASS log_pkt_fields(AODV_msg * msg)$/;"	f
log_rt_fd	debug.c	/^int log_rt_fd = -1;$/;"	v
log_rt_table_init	debug.c	/^void NS_CLASS log_rt_table_init()$/;"	f
log_to_file	main.c	/^int log_to_file = 0;$/;"	v
longopts	main.c	/^struct option longopts[] = {$/;"	v	typeref:struct:option
mac_to_ip	llf.c	/^int mac_to_ip(struct sockaddr *hwaddr, struct in_addr *ip_addr, char *ifname)$/;"	f
main	endian.c	/^int main(int argc, char **argv)$/;"	f
main	main.c	/^int main(int argc, char **argv)$/;"	f
max	defs.h	76;"	d
min_ipenc_hdr	lnx/kaodv-ipenc.h	/^struct min_ipenc_hdr {$/;"	s
n	aodv_rerr.h	/^    u_int8_t n:1;$/;"	m	struct:__anon1
name	lnx/kaodv-netlink.h	/^	char *name;	       $/;"	m	struct:__anon10
name2index	defs.h	/^static inline int name2index(char *name)$/;"	f
neighbor	routing_table.h	/^    struct in_addr neighbor;$/;"	m	struct:precursor	typeref:struct:precursor::in_addr
neighbor_add	aodv_neighbor.c	/^void NS_CLASS neighbor_add(AODV_msg * aodv_msg, struct in_addr source,$/;"	f
neighbor_link_break	aodv_neighbor.c	/^void NS_CLASS neighbor_link_break(rt_table_t * rt)$/;"	f
netmask	defs.h	/^    struct in_addr netmask;	\/* The netmask we use *\/$/;"	m	struct:dev_info	typeref:struct:dev_info::in_addr
next	list.h	/^    struct list_t *prev, *next;$/;"	m	struct:list_t	typeref:struct:list_t::
next	llf.c	/^    struct wireless_iface *next;$/;"	m	struct:wireless_iface	typeref:struct:wireless_iface::wireless_iface	file:
next_hop	routing_table.h	/^    struct in_addr next_hop;	\/* IP address of the next hop to the dest *\/$/;"	m	struct:rt_table	typeref:struct:rt_table::in_addr
nhop	lnx/kaodv-expl.h	/^	__u32 nhop;$/;"	m	struct:expl_entry
nhop	lnx/kaodv-netlink.h	/^	u_int32_t nhop;$/;"	m	struct:kaodv_rt_msg
nif	defs.h	/^    int nif;			\/* Number of interfaces to broadcast on *\/$/;"	m	struct:host_info
nl_cleanup	nl.c	/^void nl_cleanup(void)$/;"	f
nl_init	nl.c	/^void nl_init(void)$/;"	f
nl_kaodv_callback	nl.c	/^static void nl_kaodv_callback(int sock)$/;"	f	file:
nl_kern_route	nl.c	/^int nl_kern_route(int action, int flags, int family,$/;"	f
nl_rt_callback	nl.c	/^static void nl_rt_callback(int sock)$/;"	f	file:
nl_send	nl.c	/^int nl_send(struct nlsock *nl, struct nlmsghdr *n)$/;"	f
nl_send_add_route_msg	nl.c	/^int nl_send_add_route_msg(struct in_addr dest, struct in_addr next_hop,$/;"	f
nl_send_conf_msg	nl.c	/^int nl_send_conf_msg(void)$/;"	f
nl_send_del_route_msg	nl.c	/^int nl_send_del_route_msg(struct in_addr dest, struct in_addr next_hop, int metric)$/;"	f
nl_send_no_route_found_msg	nl.c	/^int nl_send_no_route_found_msg(struct in_addr dest)$/;"	f
nlsock	nl.c	/^struct nlsock {$/;"	s	file:
nprec	routing_table.h	/^    int nprec;			\/* Number of precursors *\/$/;"	m	struct:rt_table
nr_callbacks	main.c	/^static int nr_callbacks = 0;$/;"	v	file:
num_active	routing_table.h	/^    unsigned int num_active;$/;"	m	struct:routing_table
num_entries	routing_table.h	/^    unsigned int num_entries;$/;"	m	struct:routing_table
num_parms	lnx/kaodv-mod.c	/^static int num_parms = 0;$/;"	v	file:
num_rerr	aodv_socket.h	/^int num_rerr;$/;"	v
num_rreq	aodv_socket.h	/^int num_rreq;$/;"	v
offset	defs.h	/^    inline static int &offset() {$/;"	f	struct:AODV_msg::__anon6
offset_	defs.h	/^    static int offset_;		\/\/ Required by PacketHeaderManager$/;"	m	struct:AODV_msg::__anon6
okfn	lnx/kaodv-queue.c	/^	int (*okfn) (struct sk_buff *);$/;"	m	struct:kaodv_queue_entry	file:
optimized_hellos	main.c	/^int optimized_hellos = 0;$/;"	v
orig_addr	aodv_rrep.h	/^    u_int32_t orig_addr;$/;"	m	struct:__anon3
orig_addr	aodv_rreq.h	/^    struct in_addr orig_addr;	\/* Source of the RREQ *\/$/;"	m	struct:rreq_record	typeref:struct:rreq_record::in_addr
orig_addr	aodv_rreq.h	/^    u_int32_t orig_addr;$/;"	m	struct:__anon5
orig_seqno	aodv_rreq.h	/^    u_int32_t orig_seqno;$/;"	m	struct:__anon5
packet_queue_timeout	aodv_timeout.c	/^void NS_CLASS packet_queue_timeout(void *arg)$/;"	f
packet_type	debug.c	/^char *packet_type(u_int type)$/;"	f
peer	llf.c	/^    struct sockaddr_nl peer;$/;"	m	struct:rtnl_handle	typeref:struct:rtnl_handle::sockaddr_nl	file:
peer	nl.c	/^struct sockaddr_nl peer = { AF_NETLINK, 0, 0, 0 };$/;"	v	typeref:struct:sockaddr_nl
peer_pid	lnx/kaodv-netlink.c	/^static int peer_pid;$/;"	v	file:
pkts_dropped	lnx/kaodv-mod.c	/^static unsigned long pkts_dropped = 0;$/;"	v	file:
precursor	routing_table.h	/^typedef struct precursor {$/;"	s
precursor_add	routing_table.c	/^void NS_CLASS precursor_add(rt_table_t * rt, struct in_addr addr)$/;"	f
precursor_list_destroy	routing_table.c	/^void precursor_list_destroy(rt_table_t * rt)$/;"	f
precursor_remove	routing_table.c	/^void NS_CLASS precursor_remove(rt_table_t * rt, struct in_addr addr)$/;"	f
precursor_t	routing_table.h	/^} precursor_t;$/;"	t	typeref:struct:precursor
precursors	routing_table.h	/^    list_t precursors;		\/* List of neighbors using the route *\/$/;"	m	struct:rt_table
prefix	aodv_rrep.h	/^    u_int16_t prefix:5;$/;"	m	struct:__anon3
prefix_length	nl.c	/^int prefix_length(int family, void *nm)$/;"	f
prev	list.h	/^    struct list_t *prev, *next;$/;"	m	struct:list_t	typeref:struct:list_t::list_t
printTQ	timer_queue.c	/^void NS_CLASS printTQ(list_t * l)$/;"	f
print_eth	lnx/kaodv-debug.h	/^static inline char *print_eth(char *addr)$/;"	f
print_ip	lnx/kaodv-debug.h	/^static inline char *print_ip(__u32 addr)$/;"	f
print_rt_table	debug.c	/^void NS_CLASS print_rt_table(void *arg)$/;"	f
progname	main.c	/^char *progname;$/;"	v
protocol	lnx/kaodv-ipenc.h	/^    u_int8_t protocol;$/;"	m	struct:min_ipenc_hdr
psock	defs.h	/^    int psock;			\/* Socket to send buffered data packets. *\/$/;"	m	struct:dev_info
qual	lnx/kaodv-mod.c	/^static int qual = 0;$/;"	v	file:
qual_th	lnx/kaodv-mod.c	/^int qual_th = 0;$/;"	v
qual_th	lnx/kaodv-netlink.h	/^	int qual_th;$/;"	m	struct:kaodv_conf_msg
qual_threshold	main.c	/^int qual_threshold = 0;$/;"	v
queue_lock	lnx/kaodv-queue.c	/^static rwlock_t queue_lock = RW_LOCK_UNLOCKED;$/;"	v	file:
queue_maxlen	lnx/kaodv-queue.c	/^static unsigned int queue_maxlen = KAODV_QUEUE_QMAX_DEFAULT;$/;"	v	file:
queue_total	lnx/kaodv-queue.c	/^static unsigned int queue_total;$/;"	v	file:
r	aodv_rrep.h	/^    u_int16_t r:1;$/;"	m	struct:__anon3
r	aodv_rreq.h	/^    u_int8_t r:1;		\/* Repair flag *\/$/;"	m	struct:__anon5
r	aodv_rreq.h	/^    u_int8_t r:1;$/;"	m	struct:__anon5
range	llf.c	/^    struct iw_range range;	\/* Wireless static data *\/$/;"	m	struct:wireless_iface	typeref:struct:wireless_iface::iw_range	file:
ratelimit	main.c	/^int ratelimit = 1;		\/* Option for rate limiting RREQs and RERRs. *\/$/;"	v
rec_timer	aodv_rreq.h	/^    struct timer rec_timer;$/;"	m	struct:rreq_record	typeref:struct:rreq_record::timer
receive_n_hellos	main.c	/^int receive_n_hellos = 0;$/;"	v
recvAODVUUPacket	aodv_socket.c	/^void NS_CLASS recvAODVUUPacket(Packet * p)$/;"	f
recv_buf	aodv_socket.c	/^static char recv_buf[RECV_BUF_SIZE];$/;"	v	file:
remove_modules	main.c	/^void remove_modules(void)$/;"	f
reqs	seek_list.h	/^    int reqs;$/;"	m	struct:seek_list
rerr_add_udest	aodv_rerr.c	/^void NS_CLASS rerr_add_udest(RERR * rerr, struct in_addr udest,$/;"	f
rerr_create	aodv_rerr.c	/^RERR *NS_CLASS rerr_create(u_int8_t flags, struct in_addr dest_addr,$/;"	f
rerr_process	aodv_rerr.c	/^void NS_CLASS rerr_process(RERR * rerr, int rerrlen, struct in_addr ip_src,$/;"	f
rerr_ratel	aodv_socket.h	/^struct timeval rreq_ratel[RREQ_RATELIMIT - 1], rerr_ratel[RERR_RATELIMIT - 1];$/;"	v	typeref:struct:
res	lnx/kaodv-ipenc.h	/^    u_int8_t res:7;$/;"	m	struct:min_ipenc_hdr
res1	aodv_rerr.h	/^    u_int8_t res1:7;$/;"	m	struct:__anon1
res1	aodv_rrep.h	/^    u_int16_t res1:6;$/;"	m	struct:__anon3
res1	aodv_rreq.h	/^    u_int8_t res1:4;$/;"	m	struct:__anon5
res2	aodv_rerr.h	/^    u_int8_t res2;$/;"	m	struct:__anon1
res2	aodv_rrep.h	/^    u_int16_t res2:3;$/;"	m	struct:__anon3
res2	aodv_rreq.h	/^    u_int8_t res2;$/;"	m	struct:__anon5
reserved	aodv_rrep.h	/^    u_int8_t reserved;$/;"	m	struct:__anon4
route_delete_timeout	aodv_timeout.c	/^void NS_CLASS route_delete_timeout(void *arg)$/;"	f
route_discovery_timeout	aodv_timeout.c	/^void NS_CLASS route_discovery_timeout(void *arg)$/;"	f
route_expire_timeout	aodv_timeout.c	/^void NS_CLASS route_expire_timeout(void *arg)$/;"	f
routing_table	routing_table.h	/^struct routing_table {$/;"	s
rrep_ack_create	aodv_rrep.c	/^RREP_ack *NS_CLASS rrep_ack_create()$/;"	f
rrep_ack_process	aodv_rrep.c	/^void NS_CLASS rrep_ack_process(RREP_ack * rrep_ack, int rrep_acklen,$/;"	f
rrep_ack_timeout	aodv_timeout.c	/^void NS_CLASS rrep_ack_timeout(void *arg)$/;"	f
rrep_add_ext	aodv_rrep.c	/^AODV_ext *NS_CLASS rrep_add_ext(RREP * rrep, int type, unsigned int offset,$/;"	f
rrep_add_hello_ext	aodv_rrep.c	/^int rrep_add_hello_ext(RREP * rrep, int offset, u_int32_t interval)$/;"	f
rrep_create	aodv_rrep.c	/^RREP *NS_CLASS rrep_create(u_int8_t flags,$/;"	f
rrep_flags_to_str	debug.c	/^char *NS_CLASS rrep_flags_to_str(RREP * rrep)$/;"	f
rrep_forward	aodv_rrep.c	/^void NS_CLASS rrep_forward(RREP * rrep, int size, rt_table_t * rev_rt,$/;"	f
rrep_process	aodv_rrep.c	/^void NS_CLASS rrep_process(RREP * rrep, int rreplen, struct in_addr ip_src,$/;"	f
rrep_send	aodv_rrep.c	/^void NS_CLASS rrep_send(RREP * rrep, rt_table_t * rev_rt,$/;"	f
rreq_add_ext	aodv_rreq.c	/^AODV_ext *rreq_add_ext(RREQ * rreq, int type, unsigned int offset,$/;"	f
rreq_blacklist_find	aodv_rreq.c	/^struct blacklist *NS_CLASS rreq_blacklist_find(struct in_addr dest_addr)$/;"	f
rreq_blacklist_insert	aodv_rreq.c	/^struct blacklist *NS_CLASS rreq_blacklist_insert(struct in_addr dest_addr)$/;"	f
rreq_blacklist_timeout	aodv_rreq.c	/^void NS_CLASS rreq_blacklist_timeout(void *arg)$/;"	f
rreq_create	aodv_rreq.c	/^RREQ *NS_CLASS rreq_create(u_int8_t flags, struct in_addr dest_addr,$/;"	f
rreq_flags_to_str	debug.c	/^char *NS_CLASS rreq_flags_to_str(RREQ * rreq)$/;"	f
rreq_forward	aodv_rreq.c	/^void NS_CLASS rreq_forward(RREQ * rreq, int size, int ttl)$/;"	f
rreq_gratuitous	main.c	/^int rreq_gratuitous = 0;$/;"	v
rreq_id	aodv_rreq.h	/^    u_int32_t rreq_id;		\/* RREQ's broadcast ID *\/$/;"	m	struct:rreq_record
rreq_id	aodv_rreq.h	/^    u_int32_t rreq_id;$/;"	m	struct:__anon5
rreq_id	defs.h	/^    u_int32_t rreq_id;		\/* RREQ id *\/$/;"	m	struct:host_info
rreq_local_repair	aodv_rreq.c	/^void NS_CLASS rreq_local_repair(rt_table_t * rt, struct in_addr src_addr,$/;"	f
rreq_process	aodv_rreq.c	/^void NS_CLASS rreq_process(RREQ * rreq, int rreqlen, struct in_addr ip_src,$/;"	f
rreq_ratel	aodv_socket.h	/^struct timeval rreq_ratel[RREQ_RATELIMIT - 1], rerr_ratel[RERR_RATELIMIT - 1];$/;"	v	typeref:struct:timeval
rreq_record	aodv_rreq.h	/^struct rreq_record {$/;"	s
rreq_record_find	aodv_rreq.c	/^NS_STATIC struct rreq_record *NS_CLASS rreq_record_find(struct in_addr$/;"	f
rreq_record_insert	aodv_rreq.c	/^NS_STATIC struct rreq_record *NS_CLASS rreq_record_insert(struct in_addr$/;"	f
rreq_record_timeout	aodv_rreq.c	/^void NS_CLASS rreq_record_timeout(void *arg)$/;"	f
rreq_route_discovery	aodv_rreq.c	/^void NS_CLASS rreq_route_discovery(struct in_addr dest_addr, u_int8_t flags,$/;"	f
rreq_send	aodv_rreq.c	/^void NS_CLASS rreq_send(struct in_addr dest_addr, u_int32_t dest_seqno,$/;"	f
rt_flags_to_str	debug.c	/^char *NS_CLASS rt_flags_to_str(u_int16_t flags)$/;"	f
rt_info	lnx/kaodv-queue.c	/^	struct kaodv_rt_info rt_info;$/;"	m	struct:kaodv_queue_entry	typeref:struct:kaodv_queue_entry::kaodv_rt_info	file:
rt_log_interval	main.c	/^int rt_log_interval = 0;	\/* msecs between routing table logging 0=off *\/$/;"	v
rt_log_timer	debug.c	/^struct timer rt_log_timer;$/;"	v	typeref:struct:timer
rt_table	routing_table.h	/^struct rt_table {$/;"	s
rt_table_delete	routing_table.c	/^void NS_CLASS rt_table_delete(rt_table_t * rt)$/;"	f
rt_table_destroy	routing_table.c	/^void NS_CLASS rt_table_destroy()$/;"	f
rt_table_find	routing_table.c	/^rt_table_t *NS_CLASS rt_table_find(struct in_addr dest_addr)$/;"	f
rt_table_find_gateway	routing_table.c	/^rt_table_t *NS_CLASS rt_table_find_gateway()$/;"	f
rt_table_init	routing_table.c	/^void NS_CLASS rt_table_init()$/;"	f
rt_table_insert	routing_table.c	/^rt_table_t *NS_CLASS rt_table_insert(struct in_addr dest_addr,$/;"	f
rt_table_invalidate	routing_table.c	/^int NS_CLASS rt_table_invalidate(rt_table_t * rt)$/;"	f
rt_table_t	routing_table.h	/^typedef struct rt_table rt_table_t;$/;"	t	typeref:struct:rt_table
rt_table_update	routing_table.c	/^rt_table_t *NS_CLASS rt_table_update(rt_table_t * rt, struct in_addr next,$/;"	f
rt_table_update_inet_rt	routing_table.c	/^int NS_CLASS rt_table_update_inet_rt(rt_table_t * gw, u_int32_t life)$/;"	f
rt_table_update_route_timeouts	routing_table.c	/^void NS_CLASS rt_table_update_route_timeouts(rt_table_t * fwd_rt,$/;"	f
rt_table_update_timeout	routing_table.c	/^NS_INLINE rt_table_t *NS_CLASS rt_table_update_timeout(rt_table_t * rt,$/;"	f
rt_tbl	routing_table.h	/^struct routing_table rt_tbl;$/;"	v	typeref:struct:routing_table
rt_timer	routing_table.h	/^    struct timer rt_timer;	\/* The timer associated with this entry *\/$/;"	m	struct:rt_table	typeref:struct:rt_table::timer
rth	llf.c	/^static struct rtnl_handle rth;$/;"	v	typeref:struct:rtnl_handle	file:
rtnl	nl.c	/^struct nlsock rtnl;$/;"	v	typeref:struct:nlsock
rtnl_handle	llf.c	/^struct rtnl_handle {$/;"	s	file:
s	lnx/kaodv-ipenc.h	/^    u_int8_t s:1;$/;"	m	struct:min_ipenc_hdr
saddr	lnx/kaodv-queue.c	/^	__u32 saddr;$/;"	m	struct:kaodv_rt_info	file:
seek_list	seek_list.h	/^typedef struct seek_list {$/;"	s
seek_list_find	seek_list.c	/^seek_list_t *NS_CLASS seek_list_find(struct in_addr dest_addr)$/;"	f
seek_list_insert	seek_list.c	/^seek_list_t *NS_CLASS seek_list_insert(struct in_addr dest_addr,$/;"	f
seek_list_print	seek_list.c	/^void NS_CLASS seek_list_print()$/;"	f
seek_list_remove	seek_list.c	/^int NS_CLASS seek_list_remove(seek_list_t * entry)$/;"	f
seek_list_t	seek_list.h	/^} seek_list_t;$/;"	t	typeref:struct:seek_list
seek_timer	seek_list.h	/^    struct timer seek_timer;$/;"	m	struct:seek_list	typeref:struct:seek_list::timer
send_buf	aodv_socket.c	/^static char send_buf[SEND_BUF_SIZE];$/;"	v	file:
seq	llf.c	/^    u_int32_t seq;$/;"	m	struct:rtnl_handle	file:
seq	nl.c	/^	int seq;$/;"	m	struct:nlsock	file:
seqno	defs.h	/^    u_int32_t seqno;		\/* Sequence number *\/$/;"	m	struct:host_info
seqno_incr	routing_table.h	40;"	d
set_kernel_options	main.c	/^int set_kernel_options()$/;"	f
signal_handler	main.c	/^void signal_handler(int type)$/;"	f
sk_receive_queue	lnx/kaodv-netlink.c	49;"	d	file:
sk_socket	lnx/kaodv-netlink.c	50;"	d	file:
skb	lnx/kaodv-queue.c	/^	struct sk_buff *skb;$/;"	m	struct:kaodv_queue_entry	typeref:struct:kaodv_queue_entry::sk_buff	file:
skb_dst	lnx/kaodv.h	/^static inline struct dst_entry *skb_dst(const struct sk_buff *skb)$/;"	f
skb_dst_set	lnx/kaodv.h	/^static inline void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst)$/;"	f
sock	defs.h	/^    int sock;			\/* AODV socket associated with this device *\/$/;"	m	struct:dev_info
sock	nl.c	/^	int sock;$/;"	m	struct:nlsock	file:
src	lnx/kaodv-netlink.h	/^	u_int32_t src;$/;"	m	struct:kaodv_rt_msg
state	routing_table.h	/^    u_int8_t state;		\/* The state of this entry *\/$/;"	m	struct:rt_table
state_to_str	debug.c	/^char *NS_CLASS state_to_str(u_int8_t state)$/;"	f
tbl	routing_table.h	/^    list_t tbl[RT_TABLESIZE];$/;"	m	struct:routing_table
this_host	defs.h	/^struct host_info this_host;$/;"	v	typeref:struct:host_info
time	lnx/kaodv-netlink.h	/^	long time;$/;"	m	struct:kaodv_rt_msg
timeout	timer_queue.h	/^    struct timeval timeout;$/;"	m	struct:timer	typeref:struct:timer::timeval
timeout_func_t	timer_queue.h	/^typedef void (*timeout_func_t) (void *);$/;"	t
timeout_func_t	timer_queue.h	/^typedef void (AODVUU::*timeout_func_t) (void *);$/;"	t
timer	timer_queue.h	/^struct timer {$/;"	s
timer_add	timer_queue.c	/^NS_STATIC void NS_CLASS timer_add(struct timer *t)$/;"	f
timer_age_queue	timer_queue.c	/^struct timeval *NS_CLASS timer_age_queue()$/;"	f
timer_init	timer_queue.c	/^int NS_CLASS timer_init(struct timer *t, timeout_func_t f, void *data)$/;"	f
timer_left	timer_queue.c	/^long timer_left(struct timer *t)$/;"	f
timer_remove	timer_queue.c	/^int NS_CLASS timer_remove(struct timer *t)$/;"	f
timer_set_timeout	timer_queue.c	/^void NS_CLASS timer_set_timeout(struct timer *t, long msec)$/;"	f
timer_timeout	timer_queue.c	/^void NS_CLASS timer_timeout(struct timeval *now)$/;"	f
timer_timeout_now	timer_queue.c	/^int NS_CLASS timer_timeout_now(struct timer *t)$/;"	f
timeval_add_msec	timer_queue.h	/^static inline int timeval_add_msec(struct timeval *t, unsigned long msec)$/;"	f
timeval_diff	timer_queue.h	/^static inline long timeval_diff(struct timeval *t1, struct timeval *t2)$/;"	f
tos	lnx/kaodv-queue.c	/^	__u8 tos;$/;"	m	struct:kaodv_rt_info	file:
trace	lnx/kaodv-debug.c	/^int trace(const char *fmt, ...)$/;"	f
ttl	seek_list.h	/^    int ttl;$/;"	m	struct:seek_list
ttl_start	main.c	/^int ttl_start = TTL_START_HELLO;$/;"	v
type	aodv_rerr.h	/^    u_int8_t type;$/;"	m	struct:__anon1
type	aodv_rrep.h	/^    u_int8_t type;$/;"	m	struct:__anon3
type	aodv_rrep.h	/^    u_int8_t type;$/;"	m	struct:__anon4
type	aodv_rreq.h	/^    u_int8_t type;$/;"	m	struct:__anon5
type	defs.h	/^    u_int8_t type;$/;"	m	struct:AODV_msg::__anon6
type	defs.h	/^    u_int8_t type;$/;"	m	struct:__anon7
type	lnx/kaodv-netlink.h	/^	int type;$/;"	m	struct:__anon10
type	lnx/kaodv-netlink.h	/^	u_int8_t type;$/;"	m	struct:kaodv_rt_msg
typenames	lnx/kaodv-netlink.h	/^} typenames[KAODVM_MAX] = { $/;"	v	typeref:struct:__anon10
unidir_hack	main.c	/^int unidir_hack = 0;$/;"	v
usage	main.c	/^void usage(int status)$/;"	f
used	timer_queue.h	/^    int used;$/;"	m	struct:timer
wait_on_reboot	main.c	/^int wait_on_reboot = 1;$/;"	v
wait_on_reboot_timeout	aodv_timeout.c	/^void NS_CLASS wait_on_reboot_timeout(void *arg)$/;"	f
wireless_iface	llf.c	/^typedef struct wireless_iface {$/;"	s	file:
wireless_iface	llf.c	/^} wireless_iface;$/;"	t	typeref:struct:wireless_iface	file:
worb_timer	main.c	/^struct timer worb_timer;	\/* Wait on reboot timer *\/$/;"	v	typeref:struct:timer
write_to_log_file	debug.c	/^void NS_CLASS write_to_log_file(char *msg, int len)$/;"	f
